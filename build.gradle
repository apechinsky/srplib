
allprojects {
    group = 'org.srplib'
    version = '0.8.0-SNAPSHOT'

    ext.isReleaseVersion = !version.endsWith("-SNAPSHOT")

    repositories {
        mavenCentral()
    }

    ext.libs = [:]

    libs.guava = 'com.google.guava:guava:14.0'

    libs.junit = 'junit:junit:4.11'

    libs.mockito = 'org.mockito:mockito-core:1.9.5'

    libs.hamcrest_all = [
        libs.hamcrest_core = 'org.hamcrest:hamcrest-core:1.3',
        libs.hamcrest_library = 'org.hamcrest:hamcrest-library:1.3'
    ]

    libs.objenesis = 'org.objenesis:objenesis:2.6'

    libs.test = [
        libs.junit,
        libs.mockito,
        libs.hamcrest_core,
        libs.hamcrest_library
    ]
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'maven'
    apply plugin: 'signing'

    sourceCompatibility = '1.7'
    targetCompatibility = '1.7'

    if (JavaVersion.current().isJava8Compatible()) {
        tasks.withType(Javadoc) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }
  
    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from 'build/docs/javadoc'
    }
     
    task sourcesJar(type: Jar) {
        from sourceSets.main.allSource
        classifier = 'sources'
    }

    artifacts {
        archives jar
        archives javadocJar
        archives sourcesJar
    }

    signing {
        required { 
            isReleaseVersion && gradle.taskGraph.hasTask("uploadArchives") 
        }
        sign configurations.archives
    }

    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                def credentials = Credentials.fromProject(project)

                repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                    authentication(userName: credentials.ossrhUsername, password: credentials.ossrhPassword)
                }

                snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                    authentication(userName: credentials.ossrhUsername, password: credentials.ossrhPassword)
                }               
     
                pom.project {
                   name 'Single Responsibility Principle library'
                   packaging 'jar'
                   description 'Single Responsibility Principle (SRP) libraries collection'
                   url 'https://github.com/apechinsky/srplib'
     
                   scm {
                       url 'scm:git:git@github.com:apechinsky/srplib.git'
                       connection 'scm:git:git@github.com:apechinsky/srplib.git'
                       developerConnection 'git@github.com:apechinsky/srplib.git'
                   }
     
                   licenses {
                       license {
                           name 'The Apache Software License, Version 2.0'
                           url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                       }
                   }
     
                   developers {
                       developer {
                           id 'apechinsky'
                           name 'Anton Pechinsky'
                       }
                   }
               }
            }
        }
    }
}


  
class Credentials {

    String ossrhUsername

    String ossrhPassword

    static Credentials fromProject(Project project) {
        new Credentials(
            ossrhUsername: project.hasProperty('ossrhUsername') ? project.ossrhUsername : 'undefined',
            ossrhPassword: project.hasProperty('ossrhPassword') ? project.ossrhPassword : 'undefined'
        )
    }

}
