
- consider single method in binder bind(inputObject, outputObject, ValidationErrors)

    Object bean = ...
    PropertyValueAdapter model = PropertyValueAdapter.newFromBean(bean.getClass(), "property1");
    model.setContext(bean);

    // now model is ready to use

  Wanted:
    PropertyValueAdapter model = PropertyValueAdapter.newFromBean(bean, "property1");
    PropertyValueAdapter model = PropertyValueAdapter.newFromClass(bean.getClass(), "property1");

    also rename newFromBean(Class beanClass, String property) to newFromClass(Class beanClass, String property)
    as shown above


DONE - ConverterRegistry. Add MappingKey.toString() returning source and target class names. For easy debugging.

DONE - ValidationException - add method accepting throwable

- ConverterRegistry add method Class getMappedClass(Class)
    - what if registry contains mappings like this?:
        (String, Integer, StringToIntegerConverter)
        (String, Boolean, StringToBooleanConverter)

- BindException - binding subsystem top level exception
- Convert bind()/unbind() throw ConverterException. Solution:
    - bind() wrap it to BindException ValidationException instead
    - unbind() create ValidationError based on ConverterException

- Converter adapters
    Lambdaj Converter adapter

- Interface for ConverterRegistry

- TypeReference class.http://gafter.blogspot.com/2006/12/super-type-tokens.html

- CompositeKey.getComponents(),

- findXXXX should differ dot syntax support and recursive search
    currently findXXXX use nor dot syntax neither recursive search
    while findXXXRecursively use both

- Rename Path.parse to Path.parseDot (or similar).


- Alternative to Assert.fail returning generic value or special method returning an exception

Useful in if/else or switch scenarios:
Instead of
        switch (value) {
            case A:
                return valueA;

            case B:
                return valueB;

            default:
                Assert.fail("message");
                return null;
 
will be:
            default:
                return Assert.fail("message");
or               
            default:
                throw Assert.failure("message");
